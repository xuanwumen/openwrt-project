#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: build lean-targets

on:
  repository_dispatch:
  workflow_dispatch:
#  schedule:
#    - cron: 0 19 * * SAT
#  watch:
#    types: started

env:
  SOURCE_URL: https://github.com/coolsnowwolf/lede
  SOURCE_BRANCH: master
  CONFIG_FILE: config-test/x86/x86_64-openwrt-target.config
  DIY_SH: scripts-test/project-lede.sh
  TOOLCHAIN_TAG: toolchain
  CLASH_BINARY_PLATFORM: amd64
  TOOLCHAIN_RELEASE_UPLOAD: true
  WEBROOT: /www/wwwroot/opup.link
  TZ: Asia/Shanghai
  RUNNER: project-x86_64
  
jobs:
  Toolchain:
    runs-on: ubuntu-20.04

    outputs:
      OPENWRT_ROOT_PATH: ${{ steps.clone.outputs.OPENWRT_ROOT_PATH }}
      CURRENT_BRANCH: ${{ steps.env.outputs.CURRENT_BRANCH }}
      SOURCE_OWNER: ${{ steps.env.outputs.SOURCE_OWNER }}
      SOURCE_REPO: ${{ steps.env.outputs.SOURCE_REPO }}
      DEVICE_PLATFORM: ${{ steps.env.outputs.DEVICE_PLATFORM }}
      DEVICE_TARGET: ${{ steps.env.outputs.DEVICE_TARGET }}
      DEVICE_SUBTARGET: ${{ steps.env.outputs.DEVICE_SUBTARGET }}
      TOOLCHAIN_IMAGE: ${{ steps.env.outputs.TOOLCHAIN_IMAGE }}

    steps:
      - name: Umount Missing Loop Devices
        id: umount
        run: |
          sudo umount /dev/loop*p1 || true
          sudo losetup -D || true
          lsblk
      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install squashfs-tools $(curl -fsSL git.io/depends-ubuntu-2004)
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
          mkdir -p workspace
      
      - name: Checkout
        uses: actions/checkout@main

      - name: Clone Source Code
        id: clone
        run: |
          df -hT $PWD
          git clone $SOURCE_URL -b $SOURCE_BRANCH workspace/openwrt
          cd workspace/openwrt
          echo "OPENWRT_ROOT_PATH=$PWD" >> $GITHUB_ENV
          echo "::set-output name=OPENWRT_ROOT_PATH::$(echo $PWD)"

      - name: Generate Toolchain Config
        run: |
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRT_ROOT_PATH/.config
          echo -e "\nCONFIG_ALL=y" >> $OPENWRT_ROOT_PATH/.config
          echo -e "\nCONFIG_ALL_NONSHARED=y" >> $OPENWRT_ROOT_PATH/.config
          cd $OPENWRT_ROOT_PATH
          make defconfig > /dev/null 2>&1

      - name: Generate Variables
        id: env
        run: |
          export CURRENT_BRANCH="$(git symbolic-ref --short HEAD)"
          echo "CURRENT_BRANCH=$CURRENT_BRANCH" >> $GITHUB_ENV
          echo "::set-output name=CURRENT_BRANCH::$(echo $CURRENT_BRANCH)"
          cd $OPENWRT_ROOT_PATH
          export SOURCE_OWNER="$(echo $SOURCE_URL | awk -F '/' '{print $(NF-1)}')"
          echo "SOURCE_OWNER=$SOURCE_OWNER" >> $GITHUB_ENV
          echo "::set-output name=SOURCE_OWNER::$(echo $SOURCE_OWNER)"
          export SOURCE_REPO="$(echo $SOURCE_URL | awk -F '/' '{print $(NF)}')"
          echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
          echo "::set-output name=SOURCE_REPO::$(echo $SOURCE_REPO)"
          export DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
          echo "::set-output name=DEVICE_TARGET::$(echo $DEVICE_TARGET)"
          export DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
          echo "::set-output name=DEVICE_SUBTARGET::$(echo $DEVICE_SUBTARGET)"
          export DEVICE_PLATFORM=$(cat .config | grep CONFIG_TARGET_ARCH_PACKAGES | awk -F '"' '{print $2}')
          echo "DEVICE_PLATFORM=$DEVICE_PLATFORM" >> $GITHUB_ENV
          echo "::set-output name=DEVICE_PLATFORM::$(echo $DEVICE_PLATFORM)"
          export TOOLCHAIN_IMAGE="toolchain-$SOURCE_OWNER-$SOURCE_REPO-$SOURCE_BRANCH-$DEVICE_TARGET-$DEVICE_SUBTARGET"
          echo "TOOLCHAIN_IMAGE=$TOOLCHAIN_IMAGE" >> $GITHUB_ENV
          echo "::set-output name=TOOLCHAIN_IMAGE::$(echo $TOOLCHAIN_IMAGE)"

      - name: Compare Toolchain Hash
        id: hash
        run: |
          cd $OPENWRT_ROOT_PATH
          export CURRENT_HASH=$(git log --pretty=tformat:"%H" -n1 tools toolchain)
          echo "CURRENT_HASH=$CURRENT_HASH" >> $GITHUB_ENV
          echo "::set-output name=CURRENT_HASH::$(echo $CURRENT_HASH)"
          echo "CURRENT_HASH is $CURRENT_HASH"
          export CACHE_HASH=$(curl -fSsL https://github.com/$GITHUB_REPOSITORY/releases/download/$TOOLCHAIN_TAG/$TOOLCHAIN_IMAGE.hash)
          echo "CACHE_HASH is $CACHE_HASH"
          if [ -z "$CACHE_HASH" ] || [ "$CURRENT_HASH" != "$CACHE_HASH" ]; then
            echo "::set-output name=REBUILD_TOOLCHAIN::true"
          fi

      - name: Install Feeds
        if: steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        run: |
          cd $OPENWRT_ROOT_PATH
          mkdir customfeeds
          git clone --depth=1 https://github.com/coolsnowwolf/packages customfeeds/packages
          git clone --depth=1 https://github.com/coolsnowwolf/luci customfeeds/luci
          chmod +x ../../scripts-test/*.sh
          ../../scripts-test/hook-feeds-5.15.sh
          ./scripts/feeds install -a
          make defconfig

      - name: Compile Tools
        if: steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        run: |
          cd $OPENWRT_ROOT_PATH
          echo -e "$(nproc) thread compile"
          make tools/compile -j$(nproc) || make tools/compile -j1 V=s

      - name: Compile Toolchain
        if: steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        run: |
          cd $OPENWRT_ROOT_PATH
          echo -e "$(nproc) thread compile"
          make toolchain/compile -j$(nproc) || make toolchain/compile -j1 V=s
          rm -rf .config* dl bin

      - name: Generate Toolchain Image
        if: steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        run: |
          cd workspace
          mksquashfs openwrt $TOOLCHAIN_IMAGE -force-gid 1001 -force-uid 1001 -comp zstd
          mkdir -p $GITHUB_WORKSPACE/output
          split -d -b 1900M $TOOLCHAIN_IMAGE $GITHUB_WORKSPACE/output/$TOOLCHAIN_IMAGE.img.
          rm $TOOLCHAIN_IMAGE
          cd $OPENWRT_ROOT_PATH
          echo $CURRENT_HASH > $GITHUB_WORKSPACE/output/toolchain-$SOURCE_OWNER-$SOURCE_REPO-$SOURCE_BRANCH-$DEVICE_TARGET-$DEVICE_SUBTARGET.hash
          ls -lh $GITHUB_WORKSPACE/output
          
      - name: Upload Toolchain Image To Artifact
        if: env.TOOLCHAIN_RELEASE_UPLOAD != 'true' && steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        uses: actions/upload-artifact@main
        with:
          name: ${{ env.TOOLCHAIN_IMAGE }}
          path: output

      - name: Delete Old Toolchain Assets From Release
        if: env.TOOLCHAIN_RELEASE_UPLOAD == 'true' && steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.TOOLCHAIN_TAG }}
          assets: "toolchain-${{ env.TOOLCHAIN_IMAGE }}.*"
          fail-if-no-assets: false
          fail-if-no-release: false

      - name: Upload Toolchain Image To Release
        if: env.TOOLCHAIN_RELEASE_UPLOAD == 'true' && steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        uses: ncipollo/release-action@v1.8.0
        with:
          name: toolchain-image
          allowUpdates: true
          replacesArtifacts: true
          tag: ${{ env.TOOLCHAIN_TAG }}
          commit: ${{ env.CURRENT_BRANCH }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: output/*
          
          
  Build:
    needs: [Toolchain]
    runs-on: project-x86_64

    steps:
      - name: Restore Variables
        run: |
          echo "CURRENT_BRANCH=$(echo '${{needs.Toolchain.outputs.CURRENT_BRANCH}}')" >> $GITHUB_ENV
          echo "OPENWRT_ROOT_PATH=$(echo '${{needs.Toolchain.outputs.OPENWRT_ROOT_PATH}}')" >> $GITHUB_ENV
          echo "SOURCE_OWNER=$(echo '${{needs.Toolchain.outputs.SOURCE_OWNER}}')" >> $GITHUB_ENV
          echo "SOURCE_REPO=$(echo '${{needs.Toolchain.outputs.SOURCE_REPO}}')" >> $GITHUB_ENV
          echo "DEVICE_PLATFORM=$(echo '${{needs.Toolchain.outputs.DEVICE_PLATFORM}}')" >> $GITHUB_ENV
          echo "DEVICE_TARGET=$(echo '${{needs.Toolchain.outputs.DEVICE_TARGET}}')" >> $GITHUB_ENV
          echo "DEVICE_SUBTARGET=$(echo '${{needs.Toolchain.outputs.DEVICE_SUBTARGET}}')" >> $GITHUB_ENV
          echo "TOOLCHAIN_IMAGE=$(echo '${{needs.Toolchain.outputs.TOOLCHAIN_IMAGE}}')" >> $GITHUB_ENV

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install rdate squashfs-tools $(curl -fsSL git.io/depends-ubuntu-2004)
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime

      - name: Checkout
        uses: actions/checkout@main

      - name: Download Toolchain Image Form Artifacts
        if: env.TOOLCHAIN_RELEASE_UPLOAD != 'true'
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.TOOLCHAIN_IMAGE }}
          path: workspace

      - name: Prepare Toolchain Image Form Artifacts
        if: env.TOOLCHAIN_RELEASE_UPLOAD != 'true'
        run: |
          cd workspace
          for i in {1..9}
          do
            cat $TOOLCHAIN_IMAGE.img.0$i >> $TOOLCHAIN_IMAGE.img.00 && rm $TOOLCHAIN_IMAGE.img.0$i || break
          done
          mv $TOOLCHAIN_IMAGE.img.00 $TOOLCHAIN_IMAGE.img
          sudo umount $GITHUB_WORKSPACE/workspace/openwrt
          sudo umount $GITHUB_WORKSPACE/workspace/openwrt-ro
          mkdir openwrt-ro openwrt workdir overlay
          sudo mount -o loop $TOOLCHAIN_IMAGE.img openwrt-ro
          sudo mount -t overlay overlay -o lowerdir=openwrt-ro,upperdir=overlay,workdir=workdir openwrt
          chmod -R suling:suling openwrt
          cd $GITHUB_WORKSPACE/workspace/openwrt
          git pull

      - name: Prepare Toolchain Image Form Releases
        if: env.TOOLCHAIN_RELEASE_UPLOAD == 'true'
        run: |
          mkdir -p workspace
          cd workspace
          for i in {0..9}
          do
            curl -fsL https://github.com/$GITHUB_REPOSITORY/releases/download/$TOOLCHAIN_TAG/$TOOLCHAIN_IMAGE.img.0$i >> $TOOLCHAIN_IMAGE.img || break
          done
          sudo umount $GITHUB_WORKSPACE/workspace/openwrt
          sudo umount $GITHUB_WORKSPACE/workspace/openwrt-ro
          mkdir openwrt-ro openwrt workdir overlay
          sudo mount -o loop $TOOLCHAIN_IMAGE.img openwrt-ro
          sudo mount -t overlay overlay -o lowerdir=openwrt-ro,upperdir=overlay,workdir=workdir openwrt
          chmod -R suling:suling openwrt
          cd $GITHUB_WORKSPACE/workspace/openwrt
          rm -rf customfeeds
          make clean
          git pull
          mkdir customfeeds
          git clone --depth=1 https://github.com/coolsnowwolf/packages customfeeds/packages
          git clone --depth=1 https://github.com/coolsnowwolf/luci customfeeds/luci
          chmod +x ../../scripts-test/*.sh
          ../../scripts-test/hook-feeds.sh

      - name: Install Feeds
        run: |
          cd $GITHUB_WORKSPACE/workspace/openwrt
          ./scripts/feeds install -a

      - name: Load Custom Configuration
        run: |
          [ -e files ] && mv files $OPENWRT_ROOT_PATH/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRT_ROOT_PATH/.config
          cat config/general-packages.config >> $OPENWRT_ROOT_PATH/.config
          cd $GITHUB_WORKSPACE/workspace/openwrt
          ../../$DIY_SH

      - name: Download All Packages
        id: download
        run: |
          cd $GITHUB_WORKSPACE/workspace/openwrt
          rm -rf dl
          cp -r ~/cache/lean/5.15 ./dl
          make defconfig
          make download -j16 IGNORE_ERRORS=1
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile Packages
        run: |
          cd $GITHUB_WORKSPACE/workspace/openwrt
          echo -e "$(nproc) thread compile"
          make target/compile -j$(nproc) IGNORE_ERRORS="m n" BUILD_LOG=1 || \
          yes n | make target/compile -j1 V=s IGNORE_ERRORS=1
          make diffconfig
          make package/compile -j$(nproc) IGNORE_ERRORS=1 || make package/compile -j1 V=s IGNORE_ERRORS=1
          make package/index

      - name: Generate Firmware
        id: generate
        run: |
            mkdir -p $OPENWRT_ROOT_PATH/files/etc/opkg
            cd $GITHUB_WORKSPACE/workspace/openwrt/files/etc/opkg
            cp $GITHUB_WORKSPACE/workspace/openwrt/data-test/opkg/distfeeds-5.15.conf ./distfeeds.conf
            sed -i "s/DEVICE_SUBTARGET/$DEVICE_SUBTARGET/g" distfeeds.conf
            sed -i "s/DEVICE_TARGET/$DEVICE_TARGET/g" distfeeds.conf
            sed -i "s/DEVICE_PLATFORM/$DEVICE_PLATFORM/g" distfeeds.conf
            cd $GITHUB_WORKSPACE/workspace/openwrt
            git clone https://git.openwrt.org/project/usign.git
            cd usign
            cmake .
            make
            sudo mv usign /bin
            mkdir -p $GITHUB_WORKSPACE/workspace/openwrt/files/etc/opkg/keys
            cd $GITHUB_WORKSPACE/workspace/openwrt/files/etc/opkg/keys
            wget -q https://opup.link/key-build.pub
            mv key-build.pub $(usign -F -p key-build.pub)
            cd $GITHUB_WORKSPACE/workspace/openwrt
            mkdir -p files/etc/uci-defaults/
            cp $GITHUB_WORKSPACE/workspace/openwrt/scripts-test/init-settings.sh files/etc/uci-defaults/99-init-settings
            mkdir -p files/www/test
            cp -r bin/targets files/www/test
            make package/install -j$(nproc) || make package/install -j1 V=s
            make target/install -j$(nproc) || make target/install -j1 V=s
            make json_overview_image_info
            make checksum          

          
          
          
          

   